{"ast":null,"code":"var _jsxFileName = \"/Users/jibrilkala/Documents/Challenges/twitter-clone/src/contex/auth-contex.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useEffect, useState } from \"react\";\nimport { account } from '../appwrite/appwriteConsig';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext({\n  isAuthenticated: false\n});\nexport const AuthContextProvider = props => {\n  _s();\n\n  const [isAuthenticated, setIsAuthenticated] = useState(false); // const [userData, setUserData] = useState()\n  //     useEffect(() => {\n  //     const getUser = account.get()\n  //     getUser.then(res => {\n  //         setUserData(res)\n  //     }, err => {\n  //         console.log(err)\n  //     })\n  // }, [])\n  // if (userData) {\n  //     setIsAuthenticated(true);\n  // } else {\n  //     setIsAuthenticated(false);\n  // }\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isAuthenticated: false\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 12\n  }, this);\n};\n\n_s(AuthContextProvider, \"BT2f1XiqCgFHwobQTWR7kond0Ig=\");\n\n_c = AuthContextProvider;\nexport default AuthContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["createContext","useEffect","useState","account","AuthContext","isAuthenticated","AuthContextProvider","props","setIsAuthenticated","children"],"sources":["/Users/jibrilkala/Documents/Challenges/twitter-clone/src/contex/auth-contex.js"],"sourcesContent":["import { createContext, useEffect, useState } from \"react\";\nimport { account } from '../appwrite/appwriteConsig';\n\nconst AuthContext = createContext({\n    isAuthenticated: false,\n});\n\n\nexport const AuthContextProvider = (props) => {\n\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\n    // const [userData, setUserData] = useState()\n\n    //     useEffect(() => {\n    //     const getUser = account.get()\n\n    //     getUser.then(res => {\n    //         setUserData(res)\n    //     }, err => {\n    //         console.log(err)\n    //     })\n\n    // }, [])\n\n    // if (userData) {\n    //     setIsAuthenticated(true);\n    // } else {\n    //     setIsAuthenticated(false);\n    // }\n\n\n\n    return <AuthContext.Provider value={{\n            isAuthenticated: false,\n        }}>\n        {props.children}\n    </AuthContext.Provider>;\n}\n\nexport default AuthContext;\n\n\n"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,SAASC,OAAT,QAAwB,4BAAxB;;AAEA,MAAMC,WAAW,gBAAGJ,aAAa,CAAC;EAC9BK,eAAe,EAAE;AADa,CAAD,CAAjC;AAKA,OAAO,MAAMC,mBAAmB,GAAIC,KAAD,IAAW;EAAA;;EAE1C,MAAM,CAACF,eAAD,EAAkBG,kBAAlB,IAAwCN,QAAQ,CAAC,KAAD,CAAtD,CAF0C,CAG1C;EAEA;EACA;EAEA;EACA;EACA;EACA;EACA;EAEA;EAEA;EACA;EACA;EACA;EACA;;EAIA,oBAAO,QAAC,WAAD,CAAa,QAAb;IAAsB,KAAK,EAAE;MAC5BG,eAAe,EAAE;IADW,CAA7B;IAAA,UAGFE,KAAK,CAACE;EAHJ;IAAA;IAAA;IAAA;EAAA,QAAP;AAKH,CA7BM;;GAAMH,mB;;KAAAA,mB;AA+Bb,eAAeF,WAAf"},"metadata":{},"sourceType":"module"}